// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XDECODE_MAIN_H
#define XDECODE_MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdecode_main_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef unsigned long int u64;

#else
typedef struct {
    u16 DeviceId;
    u32 Axi4lites_BaseAddress;
} XDecode_main_Config;
#endif

typedef struct {
    u32 Axi4lites_BaseAddress;
    u32 IsReady;
} XDecode_main;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDecode_main_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDecode_main_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDecode_main_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDecode_main_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDecode_main_Initialize(XDecode_main *InstancePtr, u16 DeviceId);
XDecode_main_Config* XDecode_main_LookupConfig(u16 DeviceId);
int XDecode_main_CfgInitialize(XDecode_main *InstancePtr, XDecode_main_Config *ConfigPtr);
#else
int XDecode_main_Initialize(XDecode_main *InstancePtr, const char* InstanceName);
int XDecode_main_Release(XDecode_main *InstancePtr);
#endif

void XDecode_main_Start(XDecode_main *InstancePtr);
u32 XDecode_main_IsDone(XDecode_main *InstancePtr);
u32 XDecode_main_IsIdle(XDecode_main *InstancePtr);
u32 XDecode_main_IsReady(XDecode_main *InstancePtr);
void XDecode_main_EnableAutoRestart(XDecode_main *InstancePtr);
void XDecode_main_DisableAutoRestart(XDecode_main *InstancePtr);

void XDecode_main_SetNalu_startcodeprefix_len(XDecode_main *InstancePtr, u32 Data);
u32 XDecode_main_GetNalu_startcodeprefix_len(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_len(XDecode_main *InstancePtr, u32 Data);
u32 XDecode_main_GetNalu_len(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_nal_unit_type(XDecode_main *InstancePtr, u32 Data);
u32 XDecode_main_GetNalu_nal_unit_type(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_nal_reference_idc(XDecode_main *InstancePtr, u32 Data);
u32 XDecode_main_GetNalu_nal_reference_idc(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_forbidden_bit(XDecode_main *InstancePtr, u32 Data);
u32 XDecode_main_GetNalu_forbidden_bit(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_bit_offset(XDecode_main *InstancePtr, u64 Data);
u64 XDecode_main_GetNalu_bit_offset(XDecode_main *InstancePtr);
void XDecode_main_SetNalu_bit_length(XDecode_main *InstancePtr, u64 Data);
u64 XDecode_main_GetNalu_bit_length(XDecode_main *InstancePtr);

void XDecode_main_InterruptGlobalEnable(XDecode_main *InstancePtr);
void XDecode_main_InterruptGlobalDisable(XDecode_main *InstancePtr);
void XDecode_main_InterruptEnable(XDecode_main *InstancePtr, u32 Mask);
void XDecode_main_InterruptDisable(XDecode_main *InstancePtr, u32 Mask);
void XDecode_main_InterruptClear(XDecode_main *InstancePtr, u32 Mask);
u32 XDecode_main_InterruptGetEnabled(XDecode_main *InstancePtr);
u32 XDecode_main_InterruptGetStatus(XDecode_main *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
